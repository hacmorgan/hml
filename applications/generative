#! /usr/bin/env python3


"""
Train or generate from a generative model

Author:  Hamish Morgan
Date:    21/06/2022
License: BSD
"""


import argparse
import datetime
import importlib
import os
import sys


MODES_OF_OPERATION = ("train", "generate")


def main(args: argparse.Namespace) -> int:
    """
    Main CLI routine

    Args:
        args: Command line arguments

    Returns:
        Exit status
    """
    # Instantiate the model
    model_module = importlib.import_module(f"hml.models.{args.model_class}")
    model = model_module.Model(checkpoint=args.checkpoint)

    # Run the model's train/generate method
    if args.mode == "train":
        model.train(
            model_dir=os.path.join(args.models_dir, args.model_name),
            train_path=args.train_path,
            val_path=args.val_path,
            epochs=args.epochs,
            debug=args.debug,
        )
    elif args.mode == "generate":
        model.generate(
            save_output=args.save_generator_output,
            num_generations=args.num_generations,
        )
    else:
        raise argparse.ArgumentError(
            argument=args.mode,
            message=f"Invalid mode: {args.mode}, must be one of {MODES_OF_OPERATION}",
        )


def get_args() -> argparse.Namespace:
    """
    Define and parse command line arguments

    Returns:
        Argument values as argparse namespace
    """
    # Help formatter
    formatter = argparse.ArgumentDefaultsHelpFormatter

    # Global parser and options
    parser = argparse.ArgumentParser("Generate pixel art", formatter_class=formatter)
    parser.add_argument(
        "--checkpoint",
        "-c",
        type=str,
        help="Generate, discriminate, or continue training model from this checkpoint",
    )
    parser.add_argument(
        "--model-class",
        "-m",
        type=str,
        default="gan",
        help="Generative model to use. `Model` class is imported from hml.models.<model_class>",
    )

    # Use subcommands
    subparsers = parser.add_subparsers(help="Modes of operation", dest="mode")

    # Train subcommand
    train_parser = subparsers.add_parser(
        "train", help="Train a model", formatter_class=formatter
    )
    train_parser.add_argument(
        "--train-path",
        "-t",
        type=str,
        default="/mnt/storage/ml/data/pixel-art/train",
        help="Path to training dataset directory",
    )
    train_parser.add_argument(
        "--debug",
        "-d",
        action="store_true",
        help="Don't check git status, current test is just for debugging",
    )
    train_parser.add_argument(
        "--epochs",
        "-e",
        type=int,
        default=20000,
    )
    train_parser.add_argument(
        "--models-dir",
        type=str,
        default="/mnt/storage/ml/models",
    )
    train_parser.add_argument(
        "--model-name",
        "-n",
        type=str,
        default=datetime.datetime.now().strftime("%Y%m%d-%H%M%S"),
    )
    train_parser.add_argument(
        "--val-path",
        "-v",
        type=str,
        default="/mnt/storage/ml/data/pixel-art/val",
        help="Path to validation dataset directory",
    )

    # Generate subcommand
    generate_parser = subparsers.add_parser(
        "generate",
        help="Generate images using a trained model",
        formatter_class=formatter,
    )
    generate_parser.add_argument(
        "--generator-input",
        "-g",
        type=str,
        help="Grayscale image, flattened and used as input to the generator. Must have"
        " at least as many pixels as the dimension of the latent input to the"
        " generator. Random noise is used if not given",
    )
    generate_parser.add_argument(
        "--num-generations",
        "-n",
        type=int,
        help="Number of images to generate (only in generate mode)",
    )
    generate_parser.add_argument(
        "--save-output",
        "-s",
        action="store_true",
        help="Save generator output to file instead of displaying",
    )

    return parser.parse_args()


if __name__ == "__main__":
    sys.exit(main(get_args()))
